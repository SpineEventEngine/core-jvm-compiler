/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.core.jvm.marker

import com.google.protobuf.Message
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe
import io.kotest.matchers.string.shouldContain
import io.spine.tools.core.jvm.GeneratedAnnotation
import io.spine.tools.java.reference
import java.nio.file.Path
import kotlin.io.path.Path
import kotlin.io.path.exists
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir

@DisplayName("`EveryIsOptionRenderer` should")
internal class EveryIsOptionRendererSpec {

    companion object : MarkerPluginTestSetup() {

        @BeforeAll
        @JvmStatic
        fun setup(@TempDir projectDir: Path) {
            generateCode(projectDir)
        }
    }

    /**
     * See `given/types/fruits.proto`.
     */
    @Nested inner class
    `generate an interface given as a simple name` {

        private val fruitDir = Path("io/spine/tools/core/jvm/marker/given/fruit")
        private val file = sourceFileSet.find(fruitDir.resolve("Fruit.java"))

        private val code: String
            get() = file!!.code()

        @Test
        fun `in the same package with proto types`() {
            file shouldNotBe null
            file!!.outputPath.exists() shouldBe true

            val code = file.code()
            code shouldContain "package io.spine.tools.core.jvm.marker.given.fruit;"
        }

        @Test
        fun `annotated as generated by Spine Model Compiler`() {
            val annotation = GeneratedAnnotation.forPsi().text
            code shouldContain annotation
        }

        @Test
        fun `making it 'public'`() {
            code shouldContain "public interface Fruit"
        }

        @Test
        fun `making it extend the 'Message' interface`() {
            code shouldContain "extends ${Message::class.java.reference}"
        }
    }

    /**
     * See `given/types/animals.proto`.
     */
    @Nested inner class
    `use existing interface in the same package` {

        private val javaFiles = files(
            Path(animalDir),
            "Elephant", "Zebra", "Giraffe", "Unicorn"
        )

        @Test
        fun `in the same package`() {
            javaFiles.forEach {
                val code = file(it).code()
                (code.contains("Animal {") // The interface comes the last.
                        || code.contains("Animal,") // The interface is in between.
                        ) shouldBe true
            }
        }
    }

    /**
     * See `given/types/leased_animals.proto`.
     */
    @Nested inner class
    `use existing interface from another package` {
        
        private val javaFiles = files(
            Path("io/spine/tools/core/jvm/marker/given/animal/lease"),
            "Panda", "Pangolin"
        )

        @Test
        fun `from another package`() {
            val qualifiedInterface = "$animalPackage.Animal"

            javaFiles.forEach {
                val code = file(it).code()
                code shouldContain "$qualifiedInterface {"
            }
        }
    }
}
