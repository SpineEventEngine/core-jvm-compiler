/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import com.google.devtools.ksp.KspExperimental
import io.spine.dependency.boms.BomsPlugin
import io.spine.dependency.lib.AutoService
import io.spine.dependency.lib.AutoServiceKsp
import io.spine.dependency.local.CoreJava
import io.spine.dependency.local.Validation
import io.spine.dependency.test.KotlinCompileTesting
import io.spine.tools.gradle.project.sourceSets

plugins {
    id("io.spine.core-jvm")
}
apply<BomsPlugin>()

dependencies {
    testImplementation(CoreJava.testUtilServer)

    /* This makes our KSP processor work on the `testFixtures` source set. */
    testFixturesCompileOnly(AutoService.annotations)
    kspTestFixtures(project(":routing"))
    kspTestFixtures(AutoServiceKsp.processor)
    testFixturesImplementation(CoreJava.server)
}

ksp {

    // At this point, it's not too clear whether
    // `useKsp2 = true` makes any difference
    // given we only have the KSP2-based classpath.
    // However, it's better to define this explicitly.
    @OptIn(KspExperimental::class)
    useKsp2.set(true)

    // Exclude the sources generated by the Protobuf plugin
    // so that they do not duplicate those produced by ProtoData.
    excludedSources.from.run {
        val generatedDir = "build/generated/sources/proto/testFixtures"
        add("$generatedDir/java")
        add("$generatedDir/kotlin")
        add("$generatedDir/grpc")
    }
}

sourceSets.testFixtures {
    /* We need to add these sources because original Protobuf-generated files
       are filtered via `excludedSources` above.
       The KSP Gradle Plugin analyzes source sets and task outputs before
       ProtoData comes into play.
       When we modify the source directories in `GenerateProtoTask.configureSourceSetDirs()`
       in ProtoData Gradle Plugin, it does not affect the input of KSP tasks.
       See `com.google.devtools.ksp.gradle.KspAATask.registerKspAATask()` with the following
       code block:
       ```kotlin
          .map {
             // @SkipWhenEmpty doesn't work well with File.
             project.objects.fileTree().from(it)
          }
       ```
     */
    kotlin.srcDir("generated/testFixtures/java")

    /* Temporarily add redirected output of KSP processor
       until a newer dogfooding version of Core JVM Compiler is applied. */
    kotlin.srcDir("generated/ksp/testFixtures/kotlin")
}

// Avoid Gradle warning on disabled execution optimization because of the absence of
// explicit or implicit dependencies.
afterEvaluate {
    val kspTestFixturesKotlin by tasks.getting
    val launchTestFixturesProtoData by tasks.getting
    kspTestFixturesKotlin.dependsOn(launchTestFixturesProtoData)
}

configurations
    // https://detekt.dev/docs/gettingstarted/gradle/#dependencies
    .matching { it.name != "detekt" }
    .all {
        resolutionStrategy {
            force(
                KotlinCompileTesting.libKsp,
            )
        }
    }
