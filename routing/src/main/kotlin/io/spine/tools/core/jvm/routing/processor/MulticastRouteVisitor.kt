/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.tools.core.jvm.routing.processor

import io.spine.annotation.VisibleForTesting
import com.squareup.kotlinpoet.ksp.toClassName
import io.spine.tools.core.jvm.routing.processor.Environment.SetupType

/**
 * The base class for generators of the routing setup classes that
 * serve [multicast][io.spine.server.route.Multicast] routing schemas.
 *
 * @param F The type of route functions handled by the visitor.
 *
 * @param setup The type of the routing setup class generated by this visitor.
 * @param functions The route functions declared in the [entityClass].
 * @param environment The environment for code generation.
 */
internal abstract class MulticastRouteVisitor<F : RouteFun>(
    setup: SetupType,
    functions: List<F>,
    environment: Environment
) : RouteVisitor<F>(setup, functions, environment) {

    /**
     * The name of the message parameter passed to the routing function in the generated code.
     *
     * Can be any string valid as a name for a Kotlin variable, but `"c"`,
     * which is reserved for the second parameter.
     */
    protected abstract val messageParameterName: String

    @VisibleForTesting
    internal fun checkMessageParameterName() {
        check(messageParameterName != "c") {
            "The value of the `messageParameterName` property cannot be `c`." +
                    " This name is reserved for context parameters."
        }
    }

    /**
     * Adds an entry for the given function [fn] in the routing
     * [setup][io.spine.server.route.setup.RoutingSetup.setup] function
     * inside the [routingRunBlock].
     *
     * For a [multicast][io.spine.server.route.Multicast] route it would be something like:
     * ```kotlin
     * route<MyEvent> { e, c -> MyEntity.myRouteFun(e, c) }
     * ```
     * For an [unicast][io.spine.server.route.Unicast] route it would be something like:
     * ```kotlin
     * unicast<MyEvent> { e, c -> MyEntity.myRoutFun(e, c) }
     * ```
     * If a route function does not accept context, the lambdas would have only the `e` parameter.
     */
    override fun addRoute(fn: F) {
        checkMessageParameterName()
        val p = messageParameterName
        val params = if (fn.acceptsContext) "$p, c" else p
        val entryFn = if (fn.isUnicast) UNICAST_FUN_NAME else ROUTE_FUN_NAME

        routingRunBlock.add(
            "%L<%T> { %L -> %T.%L(%L) }\n",
            entryFn,
            fn.messageClass,
            params,
            entityClass.type.toClassName(),
            fn.decl.simpleName.asString(),
            params
        )
    }
}
