/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.tools.mc.java;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.tools.mc.java.codegen";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;

option (internal_all) = true;

import "google/protobuf/empty.proto";

import "spine/tools/java/java.proto";
import "spine/tools/proto/proto.proto";
import "spine/validation/config.proto";

// Code generation options passed to Spine Protoc Plugin.
//
// The configuration is passed to the plugin as the single option containing
// base64-encoded file name (in UTF-8 charset).
//
// The referenced file contains the serialized version of this type.
//
message CodegenOptions {

    // The configuration related to validation code.
    Validation validation = 1;

    // The configuration related to entity states.
    Entities entities = 2;

    // The configuration related to command messages.
    Signals commands = 3;

    // The configuration related to event messages.
    Signals events = 4;

    // The configuration related to rejection messages.
    Signals rejections = 5;

    // The code generation config for a group of messages selected by a file pattern.
    repeated Messages messages = 6;

    // The configuration related to UUID messages.
    Uuids uuids = 7;

    // The classpath used to lookup types by their fully-qualified names.
    tools.java.Classpath classpath = 8;
}

// Configuration related to validation code.
message Validation {

    // Validating builders are always generated. This property is deprecated and ignored.
    bool skip_builders = 1 [deprecated = true];

    // Validating builders are always generated. This property is deprecated and ignored.
    bool skip_validation = 2 [deprecated = true];

    // If specified, provides a version of the Java validation code generator to use.
    //
    // Otherwise, McJava uses the version of the generator that is bundled with the plugin.
    //
    string version = 3;
}

// Code generation config for a group of signal messages.
//
message Signals {

    // The patterns which define the group.
    //
    // It is recommended that Spine users define events in files ending with "events.proto",
    // rejections — with "rejections.proto", and commands — with "commands.proto". However, users
    // can override this convention by changing these patterns.
    //
    // Note. Code generators do not presume any conventions. File patterns described above must
    // be added to `pattern` explicitly.
    //
    repeated spine.validation.FilePattern pattern = 1;

    // Java interfaces to be added to all the messages defined by this group.
    repeated AddInterface add_interface = 2;

    // Configuration for type-safe field API generation for all the messages in this group.
    GenerateFields generate_fields = 4;
}

// Code generation config for entity state messages.
message Entities {

    // The patterns which define which messages are entity state messages.
    //
    // The users may choose to define file patterns which always contain entity state definitions.
    //
    // These patterns are complementary to `option`, i.e. if both are set, both apply, so that
    // messages which match the given patterns and messages which are marked with given options
    // are considered to be entity states.
    //
    repeated spine.validation.FilePattern pattern = 1;

    // Protobuf options which may mark an entity state definition.
    //
    // By default, we recommend marking entity states with the `(entity)` option. Users may override
    // this behaviour by submitting their custom options.
    //
    // These options are complementary to `pattern`, i.e. if both are set, both apply, so that
    // messages which match the given patterns and messages which are marked with given options
    // are considered to be entity states.
    //
    repeated proto.ProtoOption option = 2;

    // Java interfaces to be added to all entity states.
    //
    // Unlike any other interfaces, entity state interfaces receive the entity ID as
    // a type argument. If an interface does not declare a single non-bounded type parameter,
    // a Java compilation error may occur.
    //
    repeated AddInterface add_interface = 3;

    // Configuration for type-safe field API generation for entity states.
    GenerateFields generate_fields = 4;

    // Whether or not query type-safe query API should be generated for all the entity states.
    //
    // It's recommended, if in doubt, to generate query API.
    //
    bool generate_queries = 5;
}

// Code generation config for type-safe field API.
//
// An empty instance of this message indicates that fields should not be generated.
//
message GenerateFields {

    // The name of the superclass of the fields class.
    //
    // It's recommended that the class extends `io.spine.base.SubscribableField`.
    //
    tools.java.JavaClassName superclass = 1;
}

// Code generation settings for an arbitrary group of messages.
//
// The group is defined by a file or a type pattern. For example, messages may be declared in files
// with the same suffix, have a common part in the type name, etc.
//
// A group may consist of just one message defined by its full name.
//
message Messages {

    // The pattern defining the group.
    Pattern pattern = 1;

    // Java interfaces to be added to all the messages in this group.
    repeated AddInterface add_interface = 2;

    // Java method generation config for messages in this group.
    repeated GenerateMethods generate_methods = 3;

    // Java nested class generation config for messages in this group.
    repeated GenerateNestedClasses generate_nested_classes = 4;

    // Java type-safe field API generation config for messages in this group.
    GenerateFields generate_fields = 5;
}

// Code generation config for the messages holding a UUID value.
//
// Messages which only have one `string` field called `uuid` are known as UUID messages.
//
message Uuids {

    // Java interfaces to be added to all the UUID messages.
    repeated AddInterface add_interface = 1;

    // Java method generation config for UUID messages.
    repeated MethodFactoryName method_factory = 2;
}

// A pattern which matches one or multiple messages.
message Pattern {

    oneof kind {

        // File name pattern.
        spine.validation.FilePattern file = 1;

        // Type name pattern.
        TypePattern type = 2;
    }
}

// Configuration for adding a Java interface to a generated class.
message AddInterface {

    tools.java.JavaClassName name = 1;
}

// Configuration for adding Java methods into a generated class.
message GenerateMethods {

    MethodFactoryName factory = 1;
}

// Configuration for adding nested classes into a generated class.
message GenerateNestedClasses {

    NestedClassFactoryName factory = 1;
}

// A Java class name of a nested class factory.
//
// The class must implement `io.spine.tools.protoc.NestedClassFactory`.
//
message NestedClassFactoryName {

    tools.java.JavaClassName class_name = 1;
}

// A Java class name of a method factory.
//
// The class must implement `io.spine.tools.protoc.MethodFactory`.
//
message MethodFactoryName {

    tools.java.JavaClassName class_name = 1;
}

// A type name pattern.
message TypePattern {

    oneof value {

        // The exact value of the expected type name.
        proto.ProtoTypeName expected_type = 1;

        // A regular expression to match a type name.
        string regex = 2;
    }
}
