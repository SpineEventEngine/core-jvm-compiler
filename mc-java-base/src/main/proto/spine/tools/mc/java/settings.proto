/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.tools.mc.java;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.tools.mc.java.settings";
option java_outer_classname = "SettingsProto";
option java_multiple_files = true;

option (internal_all) = true;

import "spine/tools/java/java.proto";
import "spine/tools/proto/proto.proto";
import "spine/protodata/file_pattern.proto";
import "spine/protodata/render_actions.proto";

// Code generation settings passed to Spine Protoc Plugin.
//
// The configuration is passed to the plugin as the single option containing
// base64-encoded file name (in UTF-8 charset).
//
// The referenced file contains the serialized version of this type.
//
message Combined {

    // The configuration related to validation code.
    Validation validation = 1;

    // The configuration related to entity states.
    Entities entities = 2;

    // For previously deprecated fields.
    reserved 3 to 6;

    // Settings for code generation of signal messages.
    SignalSettings signal_settings = 9;

    // The code generation settings for groups of messages selected by patterns.
    GroupSettings group_settings = 10;

    // The configuration related to UUID messages.
    Uuids uuids = 7;

    // The classpath used to lookup types by their fully-qualified names.
    tools.java.Classpath classpath = 8;
}

// Configuration related to validation code.
message Validation {

    // Validating builders are always generated. This property is deprecated and ignored.
    bool skip_builders = 1 [deprecated = true];

    // Validating builders are always generated. This property is deprecated and ignored.
    bool skip_validation = 2 [deprecated = true];

    // If specified, provides a version of the Java validation code generator to use.
    //
    // Otherwise, McJava uses the version of the generator that is bundled with the plugin.
    //
    string version = 3;
}

// Code generation settings for a group of signal messages.
message Signals {

    // The patterns which define the group.
    //
    // It is recommended that users define signal message types according
    // to the following conventions:
    //  1. commands — in files ending with "commands.proto",
    //  2. events — in files ending with "events.proto", and
    //  3. rejections — in files ending with "rejections.proto".
    //
    // However, users can override this convention by specifying custom patterns.
    //
    // NOTE: Code generators do not presume any conventions.
    // Conventional file patterns described above must be added to the `pattern` field explicitly.
    //
    repeated protodata.FilePattern pattern = 1;

    reserved 2, 3;
    reserved "add_interface";
    reserved "generate_fields";

    // Code generation actions applied to the signal message types.
    protodata.Actions actions = 4;
}

// Code generation settings for `Signal` messages.
message SignalSettings {

    // Settings for command messages.
    Signals commands = 1;

    // Settings for event messages.
    Signals events = 2;

    // Settings for rejection messages.
    Signals rejections = 3;
}

// Code generation settings for entity state messages.
message Entities {

    // For previously deprecated `pattern` field.
    reserved 1;
    reserved "pattern";

    // Protobuf options which may mark an entity state definition.
    //
    // By default, we recommend marking entity states with the `(entity)` option.
    // Users may override this behaviour by submitting their custom options.
    //
    repeated proto.ProtoOption option = 2;

    reserved 3, 4;
    reserved "add_interface";
    reserved "generate_fields";

    // Whether or not query type-safe query API should be generated for all the entity states.
    //
    // The default value is set to `true` via Gradle project extension applied by
    // McJava Gradle Plugin.
    //
    bool generate_queries = 5;

    // The code generation actions applied to entity state types.
    protodata.Actions actions = 6;
}

// Code generation settings for an arbitrary group of messages.
//
// The group is defined by a file or a type pattern. For example, messages may be declared in files
// with the same suffix, have a common part in the type name, etc.
//
// A group may consist of just one message defined by its full name.
//
message MessageGroup {

    // The pattern defining the group.
    Pattern pattern = 1;

    reserved 2 to 5;
    reserved "add_interface";
    reserved "generate_methods";
    reserved "generate_nested_classes";
    reserved "generate_fields";

    // The code generation actions applied to selected message types.
    protodata.Actions actions = 6;
}

// A pattern which matches one or multiple messages.
message Pattern {

    oneof kind {

        // File name pattern.
        protodata.FilePattern file = 1;

        // Type name pattern.
        TypePattern type = 2;
    }
}

// A type name pattern.
message TypePattern {

    oneof value {

        // The exact value of the expected type name.
        proto.ProtoTypeName expected_type = 1;

        // A regular expression to match a type name.
        string regex = 2;
    }
}

// The code generation settings for groups of messages selected by file patterns.
message GroupSettings {

    // Code generation settings for one group of messages specified by a pattern.
    repeated MessageGroup group = 1;
}

// Code generation settings for the messages holding a UUID value.
//
// Messages which only have one `string` field called `uuid` are known as UUID messages.
//
message Uuids {

    // Previously deprecated.
    reserved 1, 2;
    reserved "add_interface";
    reserved "method_factory";

    // Names of classes implementing the `io.spine.protodata.renderer.RenderAction` class
    // that are to be applied to the UUID messages.
    protodata.Actions actions = 3;
}

